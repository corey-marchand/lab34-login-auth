{"ast":null,"code":"var _jsxFileName = \"/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab34-login-auth/practice/src/components/auth/context.js\";\nimport React from 'react';\nimport cookie from 'react-cookies';\nimport jwt from 'jsonwebtoken';\nconst API = process.env.REACT_APP_API;\nconst testLogins = {\n  testAdmin: process.env.REACT_APP_ADMIN_TOKEN || '',\n  testEditor: process.env.REACT_APP_EDITOR_TOKEN || '',\n  testUser: process.env.REACT_APP_USER_TOKEN || ''\n};\nexport const LoginContext = React.createContext();\n\nclass LoginProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.login = (username, password) => {\n      // This is foul and unsafe ... but when working offline / testmode ess oh kay\n      if (testLogins[username]) {\n        this.validateToken(testLogins[username]);\n      } else {\n        fetch(\"\".concat(API, \"/signin\"), {\n          method: 'post',\n          mode: 'cors',\n          cache: 'no-cache',\n          headers: new Headers({\n            \"Authorization\": \"Basic \".concat(btoa(\"\".concat(username, \":\").concat(password)))\n          })\n        }).then(response => response.text()).then(token => this.validateToken(token)).catch(console.error);\n      }\n    };\n\n    this.validateToken = token => {\n      try {\n        let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n        console.log('all good');\n        this.setLoginState(true, token, user);\n      } catch (e) {\n        this.setLoginState(false, null, {});\n        console.log(\"Token Validation Error\", e);\n      }\n    };\n\n    this.logout = () => {\n      this.setLoginState(false, null, {});\n    };\n\n    this.setLoginState = (loggedIn, token, user) => {\n      cookie.save('auth', token);\n      this.setState({\n        token,\n        loggedIn,\n        user\n      });\n    };\n\n    this.state = {\n      loggedIn: false,\n      token: null,\n      login: this.login,\n      logout: this.logout,\n      user: {}\n    };\n  }\n\n  render() {\n    return React.createElement(LoginContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nexport default LoginProvider;","map":{"version":3,"sources":["/Users/coreymarchand/Desktop/codeFellows/401/assignments/lab34-login-auth/practice/src/components/auth/context.js"],"names":["React","cookie","jwt","API","process","env","REACT_APP_API","testLogins","testAdmin","REACT_APP_ADMIN_TOKEN","testEditor","REACT_APP_EDITOR_TOKEN","testUser","REACT_APP_USER_TOKEN","LoginContext","createContext","LoginProvider","Component","constructor","props","login","username","password","validateToken","fetch","method","mode","cache","headers","Headers","btoa","then","response","text","token","catch","console","error","user","verify","REACT_APP_SECRET","log","setLoginState","e","logout","loggedIn","save","setState","state","render","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cookie from 'react-cookies';\nimport jwt from 'jsonwebtoken';\n\nconst API = process.env.REACT_APP_API;\n\nconst testLogins = {\n  testAdmin: process.env.REACT_APP_ADMIN_TOKEN || '',\n  testEditor: process.env.REACT_APP_EDITOR_TOKEN || '',\n  testUser: process.env.REACT_APP_USER_TOKEN || '',\n};\n\nexport const LoginContext = React.createContext();\n\nclass LoginProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      token: null,\n      login: this.login,\n      logout: this.logout,\n      user: {},\n    };\n  }\n\n  login = (username, password) => {\n    // This is foul and unsafe ... but when working offline / testmode ess oh kay\n    if (testLogins[username]) {\n      this.validateToken(testLogins[username]);\n    }\n    else {\n      fetch(`${API}/signin`, {\n        method: 'post',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: new Headers({\n          \"Authorization\": `Basic ${btoa(`${username}:${password}`)}`\n        })\n      })\n        .then(response => response.text())\n        .then(token => this.validateToken(token))\n        .catch(console.error);\n    }\n  }\n\n  validateToken = token => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET)\n      console.log('all good');\n      this.setLoginState(true, token, user);\n    }\n    catch (e) {\n      this.setLoginState(false, null, {});\n      console.log(\"Token Validation Error\", e);\n    }\n\n  };\n\n  logout = () => {\n    this.setLoginState(false, null, {});\n  };\n\n  setLoginState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    this.setState({ token, loggedIn, user });\n  };\n\n  render() {\n    return (\n      <LoginContext.Provider value={this.state}>\n        {this.props.children}\n      </LoginContext.Provider>\n    );\n  }\n}\n\nexport default LoginProvider;\n"]},"metadata":{},"sourceType":"module"}